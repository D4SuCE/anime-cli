#!/bin/sh

version_number="1.0"

# UI

use_external_menu=0

external_menu() {
    rofi "$1" -sort -dmenu -i -width 1500 -p "$2"
}

launcher() {
    [ "$use_external_menu" = "0" ] && [ -z "$1" ] && set -- "+m" "$2"
    [ "$use_external_menu" = "0" ] && fzf "$1" --reverse --cycle --prompt "$2"
    [ "$use_external_menu" = "1" ] && external_menu "$1" "$2"
}

nth() {
    stdin=$(cat -)
    [ -z "$stdin" ] && return 1
    line_count="$(printf "%s\n" "$stdin" | wc -l | tr -d "[:space:]")"
    prompt="$1"
    multi_flag=""
    if [ $# -ne 1 ]; then
        shift
        multi_flag="$1"
    fi
    line=$(printf "%s" "$stdin" | cut -f1,3 | tr '\t' ' ' | launcher "$multi_flag" "$prompt" | sed s/^[[:space:]]// | cut -d ' ' -f1 | tr '\n' '|' | sed 's/|$/\n/')
    [ -n "$line" ] && result=$(printf "%s" "$stdin" | sed "s/^[[:space:]]//" | grep -E "^(${line})"'($|[[:space:]])' | cut -f2,3)
    [ -n "$result" ] && printf "%s" "$result" && return
    [ -n "$line" ] && result=$(printf "%s" "$stdin" | grep -F -x "${line}" | cut -f2,3)
    [ -n "$result" ] && printf "%s" "$result" && return
    exit 1
}

die() {
    printf "\33[2K\r\033[1;31m%s\033[0m\n" "$*" >&2
    exit 1
}

help_info() {
    printf "
    Usage:
    %s [options] [query]
    %s [query] [options]
    %s [options] [query] [options]

    Options:
      -c, --continue
        Continue watching from history
      -d, --download
        Download the video instead of playing it
      -D, --delete
        Delete history
      -l, --logview
        Show logs
      -o, --ongoing
        Show ongoing anime
      -s, --syncplay
        Use Syncplay to watch with friends
      -S, --select-nth
        Select nth ntry
      -q, --quality
        Specify the video quality
      -v, --vlc
        Use VLC to play the video
      -V, --version
        Show the version of the script
      -h, --help
        Show this help message and exit
      -H, --history
        Show watched history
      -e, --episode, -r, --range
        Specify the number of episodes to watch
      -E, --export
        Export history to working directory
      -f, --future
        Show future list
      -F, --add-future
        Add anime to future list
      -R, --remove
        Remove anime from history
      -RF, --remove-future
        Remove anime from future list
      -U, --update
        Update the script
      --rofi
        Use rofi instead of fzf for the interactive menu
      --skip
        Use anime-skip to skip the intro of the episode (mpv only)
      --no-detach
        Don't detach the player (useful for in-terminal playback, mpv only)
      --exit-after-play
        Exit the player, and return the player exit code (useful for non interactive scenarios, works only if --no-detach is used, mpv only)
    Some example usages:
      %s -q 720p banana fish
      %s --skip -S 2 one piece
      %s -d -e 2 cyberpunk edgerunners
      %s --vlc cyberpunk edgerunners -q 1080p -e 4
      %s blue lock -e 5-6
      %s -e \"5 6\" blue lock
    \n" "${0##*/}" "${0##*/}" "${0##*/}" "${0##*/}" "${0##*/}" "${0##*/}" "${0##*/}" "${0##*/}" "${0##*/}"
    exit 0
}

version_info() {
    printf "%s\n" "$version_number"
    exit 0
}

update_script() {
    update="$(curl -s "https://raw.githubusercontent.com/D4SuCE/anime-cli/main/anime-cli")" || die "Connection error"
    update="$(printf '%s\n' "$update" | diff -u "$0" -)"
    if [ -z "$update" ]; then
        printf "Script is up to date :)\n"
    else
        if printf '%s\n' "$update" | patch "$0" -; then
            printf "Script has been updated\n"
        else
            die "Can't update for some reason!"
        fi
    fi
    exit 0
}

# checks if dependencies are present
dep_ch() {
    for dep; do
        command -v "$dep" >/dev/null || die "Program \"$dep\" not found. Please install it."
    done
}

where_iina() {
    [ -e "/Applications/IINA.app/Contents/MacOS/iina-cli" ] && echo "/Applications/IINA.app/Contents/MacOS/iina-cli" && return 0
    printf "%s" "iina" && return 0
}

where_mpv() {
    command -v "flatpak" >/dev/null && flatpak info io.mpv.Mpv >/dev/null 2>&1 && printf "%s" "flatpak_mpv" && return 0
    printf "%s" "mpv" && return 0
}

# Scraping

export_history() {
    while read -r ep_no id title; do
        title="$(printf "%s" "$title" | sed "s/ ([0-9].*)//")"
        anime_list="$(printf "%s\n%s\n" "$anime_list" "$title")"
    done < "$histfile"
    anime_list="$(printf "%s" "$anime_list" | sed '/^$/d')"
    [ -z "$anime_list" ] && die "History is empty!"
    printf "%s" "$anime_list" > "$(pwd)/history.txt"
    printf "\33[2K\r\033[1;34mSuccessful export of history to "$(pwd)/history.txt"\033[0m\n"
    exit 0
}

update_anime_title() {
    pattern="episodes - Ongoing"
    while read -r ep_no id title; do
        if ! printf "%s" "$title" | grep -q "$pattern"; then
            continue
        fi
        episodes_json=$(get_episodes_json "$id")
        ep_list=$(episodes_list)
        ep_count=$(printf "%s\n" "$ep_list" | wc -l)
        ep_count_title=$(printf "%s" "$title" | cut -d '(' -f2 | cut -d '/' -f1)
        ep_count_max=$(printf "%s" "$title" | cut -d '(' -f2 | cut -d '/' -f2 | cut -d ' ' -f1)
        if [ "$ep_count" -gt "$ep_count_title" ]; then
            title=$(printf "%s" "$title" | sed "s/ ([0-9]\+\// ($ep_count\//")
        fi
        if [ "$ep_count" -eq "$ep_count_max" ]; then
            title=$(printf "%s" "$title" | sed "s/ ([0-9]\+\/[0-9]\+ $pattern)/ ($ep_count_max episodes)/")
        fi
        update_history
    done < "$histfile"
}

update_episode_title() {
    ep_title=$(printf "%s" "$ep_list" | sed -n "/^$ep_no /p" | sed "s/^[0-9]\+ //g")
}

select_quality() {
    case "$1" in
        best) result=$(printf "%s" "$ql_list" | head -n1 | cut -f1) ;;
        worst) result=$(printf "%s" "$ql_list" | tail -n1 | cut -f1) ;;
        *) result=$(printf "%s" "$ql_list" | grep -m 1 "$1" | cut -f1) ;;
    esac
    [ -z "$result" ] && printf "Specified quality not found, defaulting to best\n" 1>&2 && result=$(printf "%s" "$ql_list" | head -n1 | cut -f1)
    printf "%s" "$result"
}

search_anime() {
    request=$(curl -s -G "${api_url}/anime/catalog/releases" \
        --data-urlencode "f[search]=$query" \
        --data-urlencode "limit=40" \
        -H "accept: application/json")

    count="$(printf "%s" "$request" | jq -r '.meta | "\(.pagination.total)"')"

    if [ "$count" = 0 ]; then
        printf ""
        return
    fi

    ids_and_names="$(printf "%s" "$request" | jq -r '.data[] | "\(.id) \(.name.main)"')"

    printf "%s\n" "$ids_and_names" | while read -r id name; do
        request=$(curl -s -G "${api_url}/anime/releases/$id" \
            --data-urlencode "limit=40" \
            -H "accept: application/json")
            
        episodes_number=$(printf "%s" "$request" | jq "[.episodes[] | select(.ordinal)] | length")
        episodes_total=$(printf "%s" "$request" | jq -r ".episodes_total // \"0\"")

        if [ "$episodes_number" = 0 ]; then
            continue
        fi
        
        if grep -q "$id" "$histfile"; then
            name=$(printf "%s %s" "$watch_flag" "$name")
        fi

        if [ "$episodes_number" -lt "$episodes_total" ]; then
            printf "%s	%s (%s/%s episodes - Ongoing)\n" "$id" "$name" "$episodes_number" "$episodes_total"
        else
            printf "%s	%s (%s episodes)\n" "$id" "$name" "$episodes_number"
        fi
    done
}

ongoing_anime() {
    request=$(curl -s -G --compressed "${api_url}/anime/schedule/week" \
        -H "accept: application/json")

    ids_and_names="$(printf "%s" "$request" | jq -r '.[] | "\(.release.id) \(.release.name.main)"')"

    printf "%s\n" "$ids_and_names" | while read -r id name; do
        request=$(curl -s -G "${api_url}/anime/releases/$id" \
            --data-urlencode "limit=40" \
            -H "accept: application/json")
            
        episodes_number=$(printf "%s" "$request" | jq "[.episodes[] | select(.ordinal)] | length")
        episodes_total=$(printf "%s" "$request" | jq -r ".episodes_total // \"0\"")

        if [ "$episodes_number" = 0 ]; then
            continue
        fi

        if grep -q "$id" "$histfile"; then
            name=$(printf "%s %s" "$watch_flag" "$name")
        fi
        
        if [ "$episodes_number" -lt "$episodes_total" ]; then
            printf "%s	%s (%s/%s episodes - Ongoing)\n" "$id" "$name" "$episodes_number" "$episodes_total"
        else
            printf "%s	%s (%s episodes)\n" "$id" "$name" "$episodes_number"
        fi
    done
}

get_episodes_json() {
    curl -s -G "${api_url}/anime/releases/$id" \
        --data-urlencode "limit=40" \
        -H "accept: application/json" \
        | jq '.episodes'
}

episodes_list() {
    printf "%s" "$episodes_json" \
    | jq -r '.[] | "\(.ordinal) \(.name // ("Episode " + (.ordinal | tostring)))"'
}

quality_list() {
    printf "%s" "$episodes_json" \
    | jq -r '.[] | select(.ordinal == '$ep_no') | "\(.hls_1080)	1080p\n\(.hls_720)	720p\n\(.hls_480)	480p"' \
    | sed "/null/d" \
    | sed -E "s/\?.*	/	/"
}

verify_and_reroll_quality() {
    url=$(select_quality "$quality")
    http_status=$(curl -o /dev/null -w "%{http_code}" -s "$url")
    if [ "$http_status" = 200 ]; then
        printf "%s" "$url"
        return
    fi

    ql_res="1080p 720p 480p"

    for res in $ql_res; do
        url=$(select_quality "$res")
        http_status=$(curl -o /dev/null -w "%{http_code}" -s "$url")
        if [ "$http_status" != 200 ]; then
            continue
        else
            printf "%s" "$url"
            return
        fi
    done
}

get_episode_url() {
    ql_list=$(quality_list)
    episode=$(verify_and_reroll_quality "$quality")
    
    if printf "%s" "$ep_list" | grep -q "^$ep_no"; then
        [ -z "$episode" ] && die "Episode is released, but no valid sources!"
    else
        [ -z "$episode" ] && die "Episode not released!"
    fi
}

# Playing

process_hist_entry() {
    episodes_json=$(get_episodes_json "$id")
    ep_list=$(episodes_list)
    ep_no=$(printf "%s" "$ep_list" | sed -n "/^${ep_no} /{n;p;}" | cut -d ' ' -f1 | head -n1) 2>/dev/null
    update_episode_title
    [ -n "$ep_no" ] && printf "%s\t%s - Episode %s ( %s )\n" "$id" "$title" "$ep_no" "$ep_title" | sed "s/ ( Episode [0-9]\+ )//"
}

update_history() {
    if grep -q -- "$id" "$histfile"; then
        sed -E "s|^[^	]+	${id}	[^	]+$|${ep_no}	${id}	${title}|" "$histfile" >"${histfile}.new"
    else
        cp "$histfile" "${histfile}.new"
        printf "%s\t%s\t%s\n" "$ep_no" "$id" "$title" >>"${histfile}.new"
    fi
    mv "${histfile}.new" "$histfile"
}

update_future() {
    if grep -q -- "$id" "$futfile"; then
        printf "\33[2K\r\033[1;34mThis is anime already in your future list!\033[0m\n"
    else
        cp "$futfile" "${futfile}.new"
        printf "%s\t%s\n" "$id" "$title" >>"${futfile}.new"
    fi
    mv "${futfile}.new" "$futfile"
}

download() {
    case $1 in
        *m3u8*)
            if command -v "yt-dlp" >/dev/null; then
                yt-dlp "$1" --no-skip-unavailable-fragments --fragment-retries infinite -N 16 -o "$download_dir/$2.mp4"
            else
                ffmpeg -loglevel fatal -stats -bsf:a aac_adtstoasc -i "$1" -c copy "$download_dir/$2.mp4"
            fi
            ;;
        *)
            aria2c --enable-rpc=false --check-certificate=false --continue --summary-interval=0 -x 16 -s 16 "$1" --dir="$download_dir" -o "$2.mp4" --download-result=hide
            ;;
    esac
}

play_episode() {
    if ! printf "%s" "$ep_list" | grep -q "^$ep_no"; then
        die "Episodes not selected!"
    fi    
    [ "$log_episode" = 1 ] && [ "$player_function" != "download" ] && command -v logger >/dev/null && logger -t anime-cli "${allanime_title}${ep_no}"
    skip_flag="$(anime-skip -q "$id" -e "$ep_no")"
    [ "$skip" = 0 ] && skip_flag="$(printf "%s" "$skip_flag" | cut -d ' ' -f1)"
    [ -z "$episode" ] && get_episode_url

    name="$(printf "${allanime_title}Episode ${ep_no} (${ep_title})" | sed "s/ (Episode [0-9]\+)//")"

    case "$player_function" in
        mpv*)
            if [ "$no_detach" = 0 ]; then
                nohup "$player_function" $skip_flag --force-media-title="$name" "$episode" >/dev/null 2>&1 &
            else
                "$player_function" $skip_flag --force-media-title="$name" "$episode"
                mpv_exitcode=$?
                [ "$exit_after_play" = 1 ] && exit "$mpv_exitcode"
            fi
            ;;
        android_mpv) nohup am start --user 0 -a android.intent.action.VIEW -d "$episode" -n is.xyz.mpv/.MPVActivity >/dev/null 2>&1 & ;;
        android_vlc) nohup am start --user 0 -a android.intent.action.VIEW -d "$episode" -n org.videolan.vlc/org.videolan.vlc.gui.video.VideoPlayerActivity -e "title" "$name" >/dev/null 2>&1 & ;;
        *iina*) nohup "$player_function" --no-stdin --keep-running --mpv-force-media-title="$name" "$episode" >/dev/null 2>&1 & ;;
        flatpak_mpv) flatpak run io.mpv.Mpv --force-media-title="$name" "$episode" >/dev/null 2>&1 & ;;
        vlc*) nohup "$player_function" --play-and-exit --meta-title="$name" "$episode" >/dev/null 2>&1 & ;;
        *yncpla*) nohup "$player_function" "$episode" -- --force-media-title="$name" >/dev/null 2>&1 & ;;
        download) "$player_function" "$episode" "${allanime_title}${ep_title}" ;;
        catt) nohup catt cast "$episode" >/dev/null 2>&1 & ;;
        iSH)
            printf "\e]8;;vlc://%s\a~~~~~~~~~~~~~~~~~~~~\n~ Tap to open VLC ~\n~~~~~~~~~~~~~~~~~~~~\e]8;;\a\n" "$episode"
            sleep 5
            ;;
        *) nohup "$player_function" "$episode" >/dev/null 2>&1 & ;;
    esac
    replay="$episode"
    unset episode
    update_history
    [ "$use_external_menu" = "1" ] && wait
}

play() {
    start=$(printf "%s" "$ep_no" | grep -Eo '^(-1|[0-9]+(\.[0-9]+)?)')
    end=$(printf "%s" "$ep_no" | grep -Eo '(-1|[0-9]+(\.[0-9]+)?)$')
    [ "$start" = "-1" ] && ep_no=$(printf "%s" "$ep_list" | tail -n1) && unset start
    [ -z "$end" ] || [ "$end" = "$start" ] && unset start end
    [ "$end" = "-1" ] && end=$(printf "%s" "$ep_list" | tail -n1)
    line_count=$(printf "%s\n" "$ep_no" | wc -l | tr -d "[:space:]")
    if [ "$line_count" != 1 ] || [ -n "$start" ]; then
        [ -z "$start" ] && start=$(printf "%s\n" "$ep_no" | head -n1)
        [ -z "$end" ] && end=$(printf "%s\n" "$ep_no" | tail -n1)
        range=$(printf "%s\n" "$ep_list" | sed -nE "/^${start}\ /,/^${end}\ /p" | cut -d ' ' -f1)
        [ -z "$range" ] && die "Invalid range!"
        for i in $range; do
            tput clear
            ep_no=$i
            episodes_json=$(get_episodes_json)
            update_episode_title
            printf "\33[2K\r\033[1;34mPlaying Episode %s (%s)...\033[0m\n" "$ep_no" "$ep_title" | sed "s/ (Episode [0-9]\+)//"
            play_episode
            wait
        done
    else
        play_episode
    fi
    # moves up to stored position and deletes to end
    [ "$player_function" != "download" ] && tput rc && tput ed
}

# MAIN

# Setup

watch_flag="✓"
download_dir="${ANI_CLI_DOWNLOAD_DIR:-.}"
log_episode="${ANI_CLI_LOG:-1}"
quality="${ANI_CLI_QUALITY:-best}"
case "$(uname -a | cut -d " " -f 1,3-)" in
    *Darwin*) player_function="${ANI_CLI_PLAYER:-$(where_iina)}" ;;   # mac OS
    *ndroid*) player_function="${ANI_CLI_PLAYER:-android_mpv}" ;;     # Android OS (termux)
    *MINGW* | *WSL2*) player_function="${ANI_CLI_PLAYER:-mpv.exe}" ;; # Windows OS
    *ish*) player_function="${ANI_CLI_PLAYER:-iSH}" ;;                # iOS (iSH)
    *) player_function="${ANI_CLI_PLAYER:-$(where_mpv)}" ;;           # Linux OS
esac

api_url="https://anilibria.top/api/v1"
no_detach="${ANI_CLI_NO_DETACH:-0}"
exit_after_play="${ANI_CLI_EXIT_AFTER_PLAY:-0}"
use_external_menu="${ANI_CLI_EXTERNAL_MENU:-0}"
skip="${ANI_CLI_SKIP_INTRO:-0}"
future="${ANI_CLI_ADD_FUTURE:-0}"
[ -t 0 ] || use_external_menu=1
hist_dir="${ANI_CLI_HIST_DIR:-${XDG_STATE_HOME:-$HOME/.local/state}/anime-cli}"
[ ! -d "$hist_dir" ] && mkdir -p "$hist_dir"
histfile="$hist_dir/anime-history"
futfile="$hist_dir/anime-future"
[ ! -f "$histfile" ] && : >"$histfile"
[ ! -f "$futfile" ] && : >"$futfile"
search="${ANI_CLI_DEFAULT_SOURCE:-scrape}"

while [ $# -gt 0 ]; do
    case "$1" in
        -v | --vlc)
            case "$(uname -a | cut -d " " -f 1,3-)" in
                *ndroid*) player_function="android_vlc" ;;
                MINGW* | *WSL2*) player_function="vlc.exe" ;;
                *ish*) player_function="iSH" ;;
                *) player_function="vlc" ;;
            esac
            ;;
        -s | --syncplay)
            case "$(uname -s)" in
                Darwin*) player_function="/Applications/Syncplay.app/Contents/MacOS/syncplay" ;;
                MINGW* | *Msys)
                    export PATH="$PATH":"/c/Program Files (x86)/Syncplay/"
                    player_function="syncplay.exe"
                    ;;
                *) player_function="syncplay" ;;
            esac
            ;;
        -q | --quality)
            [ $# -lt 2 ] && die "missing argument!"
            quality="$2"
            shift
            ;;
        -S | --select-nth)
            [ $# -lt 2 ] && die "missing argument!"
            index="$2"
            shift
            ;;
        -c | --continue) search=continue ;;
        -d | --download) player_function=download ;;
        -D | --delete)
            : >"$histfile"
            exit 0
            ;;
        -o | --ongoing) search=ongoing ;;
        -l | --logview)
            case "$(uname -s)" in
                Darwin*) log show --predicate 'process == "logger"' ;;
                Linux*) journalctl -t anime-cli ;;
                *) die "Logger not implemented for your platform" ;;
            esac
            exit 0
            ;;
        -V | --version) version_info ;;
        -h | --help) help_info ;;
        -H | --history) search=history ;;
        -e | --episode | -r | --range)
            [ $# -lt 2 ] && die "missing argument!"
            ep_no="$2"
            [ -n "$index" ] && ANI_CLI_NON_INTERACTIVE=1 #Checks for -S presence
            shift
            ;;
        -f | --future) search=future ;;
        -F | --add-future) future=1 ;;
        -E | --export) export_history ;;
        -R | --remove) search=remove ;;
        -RF | --remove-future) search=remove-future ;;
        -U | --update) update_script ;;
        --no-detach) no_detach=1 ;;
        --exit-after-play) exit_after_play=1 ;;
        --rofi) use_external_menu=1 ;;
        --skip) skip=1 ;;
        *) query="$(printf "%s" "$query $1" | sed "s|^ ||;s| |+|g")" ;;
    esac
    shift
done

[ "$use_external_menu" = "0" ] && multi_selection_flag="${ANI_CLI_MULTI_SELECTION:-"-m"}"
[ "$use_external_menu" = "1" ] && multi_selection_flag="${ANI_CLI_MULTI_SELECTION:-"-multi-select"}"
printf "\33[2K\r\033[1;34mChecking dependencies...\033[0m\n"
dep_ch "curl" "sed" "grep" "jq" || true
[ "$skip" = 1 ] && (dep_ch "anime-skip" || true)
if [ -z "$ANI_CLI_NON_INTERACTIVE" ]; then dep_ch fzf || true; fi
case "$player_function" in
    download) dep_ch "ffmpeg" "aria2c" ;;
    android*) printf "\33[2K\rChecking of players on Android is disabled\n" ;;
    *iSH*) printf "\33[2K\rChecking of players on iOS is disabled\n" ;;
    *IINA*) true ;;      # handled out of band in where_iina
    flatpak_mpv) true ;; # handled out of band in where_mpv
    *) dep_ch "$player_function" ;;
esac

# Searching

case "$search" in
    continue)
        update_anime_title
        anime_list=$(while read -r ep_no id title; do process_hist_entry "$ep_no" "$id" "$title" & done < "$histfile")
        wait
        [ -z "$anime_list" ] && die "No unwatched series in history!"
        [ -z "${index##*[!0-9]*}" ] && id=$(printf "%s" "$anime_list" | nl -w 2 | sed 's/^[[:space:]]//' | nth "Select anime: " | cut -f1)
        [ -z "${index##*[!0-9]*}" ] || id=$(printf "%s" "$anime_list" | sed -n "${index}p" | cut -f1)
        [ -z "$id" ] && exit 1
        title=$(printf "%s" "$anime_list" | grep "$id" | cut -f2 | sed 's/ - Episode.*//')
        episodes_json=$(get_episodes_json "$id")
        ep_list=$(episodes_list)
        ep_no=$(printf "%s" "$anime_list" | grep "$id" | cut -f2 | sed -nE 's/.*- Episode (.+)$/\1/p' | cut -d ' ' -f1)
        allanime_title="$(printf "%s" "$title" | cut -d'(' -f1 | tr -d '[:punct:]')"
        episodes_json=$(get_episodes_json "$id")
        update_episode_title
        ;;
    ongoing)
        anime_list=$(ongoing_anime | sort -t '	' -k 2)
        [ -z "$anime_list" ] && die "No results found!"
        [ "$index" -eq "$index" ] 2>/dev/null && result=$(printf "%s" "$anime_list" | sed -n "${index}p")        
        [ -z "$index" ] && result=$(printf "%s" "$anime_list" | nl -w 2 | sed 's/^[[:space:]]//' | nth "Select anime: ")
        [ -z "$result" ] && exit 1        
        title=$(printf "%s" "$result" | cut -f2 | sed "s/$watch_flag //")
        allanime_title="$(printf "%s" "$title" | cut -d'(' -f1 | tr -d '[:punct:]')"
        id=$(printf "%s" "$result" | cut -f1)
        [ "$future" = 1 ] && update_future "$id" "$title" && exit 0
        episodes_json=$(get_episodes_json "$id")
        ep_list=$(episodes_list)
        [ -z "$ep_no" ] && ep_no=$(printf "%s" "$ep_list" | nth "Select episode of $title: " "$multi_selection_flag" | cut -d ' ' -f1)        
        [ -z "$ep_no" ] && exit 1
        update_episode_title
        ;;
    history)
        update_anime_title
        while read -r ep_no id title; do
            anime_list="$(printf "%s\n%s	%s\n" "$anime_list" "$id" "$title")"
        done < "$histfile"
        anime_list="$(printf "%s" "$anime_list" | sed '/^$/d' | sort -t '	' -k 2)"
        [ -z "$anime_list" ] && die "History is empty!"
        [ "$index" -eq "$index" ] 2>/dev/null && result=$(printf "%s" "$anime_list" | sed -n "${index}p")
        [ -z "$index" ] && result=$(printf "%s" "$anime_list" | nl -w 2 | sed 's/^[[:space:]]//' | nth "Select anime: ")
        [ -z "$result" ] && exit 1
        title=$(printf "%s" "$result" | cut -f2)
        allanime_title="$(printf "%s" "$title" | cut -d'(' -f1 | tr -d '[:punct:]')"
        id=$(printf "%s" "$result" | cut -f1)
        episodes_json=$(get_episodes_json "$id")
        ep_list=$(episodes_list)
        [ -z "$ep_no" ] && ep_no=$(printf "%s" "$ep_list" | nth "Select episode of $title: " "$multi_selection_flag" | cut -d ' ' -f1)        
        [ -z "$ep_no" ] && exit 1
        update_episode_title
        ;;
    future)
        update_anime_title
        while read -r id title; do
            anime_list="$(printf "%s\n%s	%s\n" "$anime_list" "$id" "$title")"
        done < "$futfile"
        anime_list="$(printf "%s" "$anime_list" | sed '/^$/d' | sort -t '	' -k 2)"
        [ -z "$anime_list" ] && die "Future is empty!"
        [ "$index" -eq "$index" ] 2>/dev/null && result=$(printf "%s" "$anime_list" | sed -n "${index}p")
        [ -z "$index" ] && result=$(printf "%s" "$anime_list" | nl -w 2 | sed 's/^[[:space:]]//' | nth "Select anime: ")
        [ -z "$result" ] && exit 1
        title=$(printf "%s" "$result" | cut -f2)
        allanime_title="$(printf "%s" "$title" | cut -d'(' -f1 | tr -d '[:punct:]')"
        id=$(printf "%s" "$result" | cut -f1)
        episodes_json=$(get_episodes_json "$id")
        ep_list=$(episodes_list)
        [ -z "$ep_no" ] && ep_no=$(printf "%s" "$ep_list" | nth "Select episode of $title: " "$multi_selection_flag" | cut -d ' ' -f1)        
        [ -z "$ep_no" ] && exit 1
        update_episode_title
        ;;
    remove)
        while read -r ep_no id title; do
            title=$(printf "%s" "$title" | sed "s/ ([0-9].*)//")
            anime_list="$(printf "%s\n%s	%s\n" "$anime_list" "$id" "$title")"
        done < "$histfile"
        anime_list="$(printf "%s" "$anime_list" | sed '/^$/d' | sort -t '	' -k 2)"
        [ -z "$anime_list" ] && die "History is empty!"
        result=$(printf "%s" "$anime_list" | nl -w 2 | nth "Select anime: " "$multi_selection_flag")
        [ -z "$result" ] && exit 1
        ids=$(printf "%s" "$result" | cut -f1)
        pattern=$(printf "%s" "$ids" | tr '\n' '|' | sed 's/|$//')
        names=$(grep -E "$pattern" "$histfile" | cut -f3 | sed "s/ ([0-9].*)//")
        grep -v -E "$pattern" "$histfile" > "${histfile}.new"
        mv "${histfile}.new" "$histfile"
        flag=$(grep -E "$pattern" "$histfile")
        [ -z "$flag" ] && printf "\33[2K\r\033[1;34mSuccessful remove anime from history:\n%s\033[0m\n" "$names" && exit 0
        [ -n "$flag" ] && die "Something went wrong!" && exit 1
        ;;
    remove-future)
        while read -r id title; do
            title=$(printf "%s" "$title" | sed "s/ ([0-9].*)//")
            anime_list="$(printf "%s\n%s	%s\n" "$anime_list" "$id" "$title")"
        done < "$futfile"
        anime_list="$(printf "%s" "$anime_list" | sed '/^$/d' | sort -t '	' -k 2)"
        [ -z "$anime_list" ] && die "Future is empty!"
        result=$(printf "%s" "$anime_list" | nl -w 2 | nth "Select anime: " "$multi_selection_flag")
        [ -z "$result" ] && exit 1
        ids=$(printf "%s" "$result" | cut -f1)
        pattern=$(printf "%s" "$ids" | tr '\n' '|' | sed 's/|$//')
        names=$(grep -E "$pattern" "$futfile" | cut -f2 | sed "s/ ([0-9].*)//")
        grep -v -E "$pattern" "$futfile" > "${futfile}.new"
        mv "${futfile}.new" "$futfile"
        flag=$(grep -E "$pattern" "$futfile")
        [ -z "$flag" ] && printf "\33[2K\r\033[1;34mSuccessful remove anime from future:\n%s\033[0m\n" "$names" && exit 0
        [ -n "$flag" ] && die "Something went wrong!" && exit 1
        ;;
    *)
        if [ "$use_external_menu" = "0" ]; then
            while [ -z "$query" ]; do
                printf "\33[2K\r\033[1;36mSearch anime: \033[0m" && read -r query
            done
        else
            [ -z "$query" ] && query=$(printf "" | external_menu "" "Search anime: ")
            [ -z "$query" ] && exit 1
        fi

        query=$(printf "%s" "$query" | sed "s| |+|g")
        anime_list=$(search_anime "$query" | sort -t '	' -k 2)
        [ -z "$anime_list" ] && die "No results found!"
        [ "$index" -eq "$index" ] 2>/dev/null && result=$(printf "%s" "$anime_list" | sed -n "${index}p")
        [ -z "$index" ] && result=$(printf "%s" "$anime_list" | nl -w 2 | sed 's/^[[:space:]]//' | nth "Select anime: ")
        [ -z "$result" ] && exit 1        
        title=$(printf "%s" "$result" | cut -f2 | sed "s/$watch_flag //")
        allanime_title="$(printf "%s" "$title" | cut -d'(' -f1 | tr -d '[:punct:]')"
        id=$(printf "%s" "$result" | cut -f1)
        [ "$future" = 1 ] && update_future "$id" "$title" && exit 0
        episodes_json=$(get_episodes_json "$id")
        ep_list=$(episodes_list)
        [ -z "$ep_no" ] && ep_no=$(printf "%s" "$ep_list" | nth "Select episode of $title: " "$multi_selection_flag" | cut -d ' ' -f1)        
        [ -z "$ep_no" ] && exit 1
        update_episode_title
        ;;
esac

# moves the cursor up one line and clears that line
tput cuu1 && tput el
# stores the position of cursor
tput sc

# playback & loop
play
[ "$player_function" = "download" ] && exit 0

while name="$(printf "Playing Episode $ep_no ($ep_title) of $title... " | sed "s/ (Episode [0-9]\+)//")" && cmd="$(printf "next\nreplay\nprevious\nselect\nchange_quality\nskip\nquit" | nth "$name")"; do
    case "$cmd" in
        next) ep_no=$(printf "%s" "$ep_list" | sed -n "/^${ep_no} /{n;p;}" |    cut -d ' ' -f1 | head -n1) 2>/dev/null && update_episode_title ;;
        replay) episode="$replay" ;;
        previous) ep_no=$(printf "%s" "$ep_list" | sed -n "/^${ep_no} /{g;1!p;};h" | cut -d ' ' -f1 | head -n1) 2>/dev/null && update_episode_title ;;
        select) ep_no=$(printf "%s" "$ep_list" | nth "Select episode of $title: " "$multi_selection_flag" | cut -d ' ' -f1) && update_episode_title ;;
        change_quality)
            episode=$(quality=$(printf "%s" "$ql_list" | nl -w 2 | sed 's/^[[:space:]]//' | nth "Select quality: " | cut -f1) && verify_and_reroll_quality "$quality") ;;
        skip)
            skip=$(printf "1	Yes\n0	No" | nl -w 2 | sed 's/^[[:space:]]//' | nth "Select skip: " | cut -f1) ;;
        *) exit 0 ;;
    esac
    [ -z "$ep_no" ] && die "Out of range"
    play
done
